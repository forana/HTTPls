package com.forana.please;

import java.util.HashMap;
import java.util.Map;

/**
 * Factory that builds <code>HTTPRequest</code> objects, allowing default headers. Further
 * customization can be achieved by extending this class and overriding
 * {@link #customize(HTTPRequest)}.
 * 
 * @author forana
 */
public class HTTPRequestFactory {
    private String urlBase;

    private Map<String, String> defaultHeaders = new HashMap<>();

    /**
     * Initializes a factory with no base URL.
     */
    public HTTPRequestFactory() {
        this("");
    }

    /**
     * Initializes the factory with a base URL. This base is prepended to the URLs of all requests
     * generated by this factory (useful for REST APIs).
     * 
     * For example, a base of "http://example.com" would give a <code>get("/things")</code> request
     * an internal URL to hit of "http://example.com/things".
     * 
     * @param urlBase
     */
    public HTTPRequestFactory(String urlBase) {
        this.urlBase = urlBase;
    }

    /**
     * Apply custom behavior from a subclass to the request being built (or possibly even wrap and
     * return a new HTTPRequest instance, maybe even a subclass).
     * 
     * A subclass should override this if it wants to be useful.
     */
    protected HTTPRequest customize(HTTPRequest request) {
        return request;
    }

    /**
     * Adds a header to each request created by this factory, effectively calling <code>
     * request.header(name, value) for each.
     * 
     * Duplicate headers are not supported - subsequent calls with the same name will replace the
     * previous call's value. According to the HTTP spec, duplicate headers are allowed only if the
     * combined values are semantically identical to a comma-separated list of the values. If such a
     * thing is needed, you must combine the values manually.
     * 
     * @param name
     * @param value
     * @return this
     */
    public HTTPRequestFactory addDefaultHeader(String name, String value) {
        defaultHeaders.put(name, value);
        return this;
    }

    private HTTPRequest populateHeaders(HTTPRequest request) {
        for (String key : defaultHeaders.keySet()) {
            request.header(key, defaultHeaders.get(key));
        }
        return request;
    }

    /**
     * Start building a request to a URL with an arbitrary HTTP method, such as PATCH or HEAD.
     * 
     * Note that unsupported methods (e.g. BREW) may cause an exception in subsequent calls to
     * <code>HTTPRequest.send()</code>.
     */
    public HTTPRequest request(String method, String url) {
        return customize(populateHeaders(new HTTPRequest(
                method,
                urlBase == null ? url : urlBase + url)));
    }

    /**
     * Start building a GET request to a URL.
     */
    public HTTPRequest get(String url) {
        return request("GET", url);
    }

    /**
     * Start building a POST request to a URL.
     */
    public HTTPRequest post(String url) {
        return request("POST", url);
    }

    /**
     * Start building a PUT request to a URL.
     */
    public HTTPRequest put(String url) {
        return request("PUT", url);
    }

    /**
     * Start building a DELETE request to a URL.
     */
    public HTTPRequest delete(String url) {
        return request("DELETE", url);
    }
}
